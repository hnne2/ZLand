package com.gr.zland.bot.service

import com.gr.zland.bot.keyboard.InlineKeyboard
import com.gr.zland.bot.keyboard.MenuKeyboard
import org.springframework.stereotype.Service
import org.telegram.telegrambots.bots.TelegramLongPollingBot
import org.telegram.telegrambots.meta.api.methods.send.SendDocument
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto
import org.telegram.telegrambots.meta.api.objects.InputFile
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow
import org.telegram.telegrambots.meta.api.objects.webapp.WebAppInfo
import org.telegram.telegrambots.meta.exceptions.TelegramApiException
import java.io.File

@Service
class MessageService(
    private val bot: TelegramLongPollingBot,
    private val menuKeyboard: MenuKeyboard,
    private val inlineKeyboard: InlineKeyboard,
) {
    val photoFile = File("/home/zland/java/uploads/a.jpg")
    val pdfTop15 = File("/home/zland/java/uploads/Top15.pdf")
    fun sendWelcomeMessage(chatId: Long) {
        val message = SendMessage().apply {
            this.chatId = chatId.toString()
            text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Zland! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
            replyMarkup = menuKeyboard.create()
        }
        execute(message)
    }

    fun sendMessage(chatId: Long, text: String) {
        val message = SendMessage().apply {
            this.chatId = chatId.toString()
            this.text = text
            replyMarkup = menuKeyboard.create()
        }
        execute(message)
    }

    fun sendProductInfo(chatId: Long,miniAppUrl: String) {
        val photo = SendPhoto().apply {
            this.chatId = chatId.toString()
            photo = InputFile(photoFile)
            caption = """
                –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–º Zland Mini ‚Äì —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–µ –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–π –º–∏—Ä –≤–∫—É—Å–æ–≤!
                Zland Mini ‚Äì —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –¥–µ–≤–∞–π—Å, —ç—Ç–æ –∫–ª—é—á –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å–≤–æ–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π, —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –≤–∫—É—Å–æ–≤–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π.

                –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤–∫—É—Å–æ–≤ —Å Zland: —Å–æ–∑–¥–∞–π —Å–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –º–∏–∫—Å!
            """.trimIndent()
            replyMarkup = InlineKeyboardMarkup().apply {
                keyboard = listOf(
                    listOf(
                        InlineKeyboardButton().apply {
                            text = "–ü–æ–¥—Ä–æ–±–Ω–µ–µ";
                            webApp = WebAppInfo(miniAppUrl);
                        }
                    )
                );
            };
        }
        execute(photo)
    }

    fun sendFileWithTastes(chatId: Long) {
        val photo = SendPhoto().apply {
            this.chatId = chatId.toString()
            photo = InputFile(photoFile)
            caption = "–ü–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ç–æ–ø-15 –º–∏–∫—Å–æ–≤—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π üëá"
            replyMarkup = inlineKeyboard.createTastesKeyboard()
        }
        execute(photo)
    }

    fun sendPdfWithTastes(chatId: Long) {
        val document = SendDocument().apply {
            this.chatId = chatId.toString()
            caption = "–í–æ—Ç PDF —Å —Ç–æ–ø-15 —Å–æ—á–µ—Ç–∞–Ω–∏—è–º–∏ üçπ"
             document = InputFile(pdfTop15)
        }
        execute(document)
    }

    fun requestLocation(chatId: Long) {
        val message = SendMessage().apply {
            this.chatId = chatId.toString()
            text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç"
            replyMarkup = createLocationKeyboard()
        }
        execute(message)
    }
    fun createLocationKeyboard(): ReplyKeyboardMarkup {
        val locationButton = KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é").apply {
            requestLocation = true
        }

        val backButton = KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        return ReplyKeyboardMarkup().apply {
            keyboard = listOf(
                KeyboardRow().apply { add(locationButton) },
                KeyboardRow().apply { add(backButton) }
            )
            resizeKeyboard = true
            oneTimeKeyboard = false // –º–æ–∂–Ω–æ true, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —É–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
        }
    }



    private fun execute(method: Any) {
        try {
            when (method) {
                is SendMessage -> bot.execute(method)
                is SendPhoto -> bot.execute(method)
                is SendDocument -> bot.execute(method)
            }
        } catch (e: TelegramApiException) {
            e.printStackTrace()
        }
    }
    fun sendMiniAppForRaffle(chatId: Long, miniAppUrl: String) {
        val message = SendMessage().apply {
            this.chatId = chatId.toString();
            text = "–£—á–∞—Å—Ç–≤—É–π –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø—Ä–∏–∑–æ–≤! –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å! üéÅ";
            replyMarkup = InlineKeyboardMarkup().apply {
                keyboard = listOf(
                    listOf(
                        InlineKeyboardButton().apply {
                            text = "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å";
                            webApp = WebAppInfo(miniAppUrl);
                        }
                    )
                );
            };
        };
        execute(message);
    }
    fun sendAboutToast(chatId: Long, miniAppUrl: String){
        val message = SendMessage().apply {
            this.chatId = chatId.toString();
            text = "–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ";
            replyMarkup = InlineKeyboardMarkup().apply {
                keyboard = listOf(
                    listOf(
                        InlineKeyboardButton().apply {
                            text = "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å";
                            webApp = WebAppInfo(miniAppUrl);
                        }
                    )
                );
            };
        };
        execute(message);
    }
    fun sendCatalog(chatId: Long, miniAppUrl: String) {
        val photo = SendPhoto().apply {
            this.chatId = chatId.toString()
            this.photo = InputFile(photoFile)
            this.replyMarkup = InlineKeyboardMarkup().apply {
                keyboard = listOf(
                    listOf(
                        InlineKeyboardButton().apply {
                            text = "–í—ã–±—Ä–∞—Ç—å –≤–∫—É—Å—ã"
                            webApp = WebAppInfo(miniAppUrl)
                        }
                    )
                )
            }
        }

        execute(photo)
    }
}
